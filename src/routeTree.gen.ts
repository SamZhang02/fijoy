// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as PublicSignupImport } from './routes/_public/signup'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as ProtectedWorkspaceIndexImport } from './routes/_protected/workspace/index'
import { Route as ProtectedWorkspaceNamespaceRouteImport } from './routes/_protected/workspace/$namespace/route'
import { Route as ProtectedWorkspaceNamespaceNamespaceImport } from './routes/_protected/workspace/$namespace/_namespace'
import { Route as ProtectedWorkspaceNamespaceNamespaceIndexImport } from './routes/_protected/workspace/$namespace/_namespace/index'
import { Route as ProtectedWorkspaceNamespaceNamespaceAccountsIndexImport } from './routes/_protected/workspace/$namespace/_namespace/accounts/index'

// Create Virtual Routes

const PublicIndexLazyImport = createFileRoute('/_public/')()
const ProtectedSetupLazyImport = createFileRoute('/_protected/setup')()
const ProtectedWorkspaceNamespaceNamespaceTransactionsLazyImport =
  createFileRoute('/_protected/workspace/$namespace/_namespace/transactions')()
const ProtectedWorkspaceNamespaceNamespaceAccountsAccountIdLazyImport =
  createFileRoute(
    '/_protected/workspace/$namespace/_namespace/accounts/$accountId',
  )()

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexLazyRoute = PublicIndexLazyImport.update({
  path: '/',
  getParentRoute: () => PublicRoute,
} as any).lazy(() => import('./routes/_public/index.lazy').then((d) => d.Route))

const ProtectedSetupLazyRoute = ProtectedSetupLazyImport.update({
  path: '/setup',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/setup.lazy').then((d) => d.Route),
)

const PublicSignupRoute = PublicSignupImport.update({
  path: '/signup',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

const ProtectedWorkspaceIndexRoute = ProtectedWorkspaceIndexImport.update({
  path: '/workspace/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedWorkspaceNamespaceRouteRoute =
  ProtectedWorkspaceNamespaceRouteImport.update({
    path: '/workspace/$namespace',
    getParentRoute: () => ProtectedRoute,
  } as any)

const ProtectedWorkspaceNamespaceNamespaceRoute =
  ProtectedWorkspaceNamespaceNamespaceImport.update({
    id: '/_namespace',
    getParentRoute: () => ProtectedWorkspaceNamespaceRouteRoute,
  } as any)

const ProtectedWorkspaceNamespaceNamespaceIndexRoute =
  ProtectedWorkspaceNamespaceNamespaceIndexImport.update({
    path: '/',
    getParentRoute: () => ProtectedWorkspaceNamespaceNamespaceRoute,
  } as any)

const ProtectedWorkspaceNamespaceNamespaceTransactionsLazyRoute =
  ProtectedWorkspaceNamespaceNamespaceTransactionsLazyImport.update({
    path: '/transactions',
    getParentRoute: () => ProtectedWorkspaceNamespaceNamespaceRoute,
  } as any).lazy(() =>
    import(
      './routes/_protected/workspace/$namespace/_namespace/transactions.lazy'
    ).then((d) => d.Route),
  )

const ProtectedWorkspaceNamespaceNamespaceAccountsIndexRoute =
  ProtectedWorkspaceNamespaceNamespaceAccountsIndexImport.update({
    path: '/accounts/',
    getParentRoute: () => ProtectedWorkspaceNamespaceNamespaceRoute,
  } as any)

const ProtectedWorkspaceNamespaceNamespaceAccountsAccountIdLazyRoute =
  ProtectedWorkspaceNamespaceNamespaceAccountsAccountIdLazyImport.update({
    path: '/accounts/$accountId',
    getParentRoute: () => ProtectedWorkspaceNamespaceNamespaceRoute,
  } as any).lazy(() =>
    import(
      './routes/_protected/workspace/$namespace/_namespace/accounts/$accountId.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
    '/_public/signup': {
      preLoaderRoute: typeof PublicSignupImport
      parentRoute: typeof PublicImport
    }
    '/_protected/setup': {
      preLoaderRoute: typeof ProtectedSetupLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_public/': {
      preLoaderRoute: typeof PublicIndexLazyImport
      parentRoute: typeof PublicImport
    }
    '/_protected/workspace/$namespace': {
      preLoaderRoute: typeof ProtectedWorkspaceNamespaceRouteImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/workspace/': {
      preLoaderRoute: typeof ProtectedWorkspaceIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/workspace/$namespace/_namespace': {
      preLoaderRoute: typeof ProtectedWorkspaceNamespaceNamespaceImport
      parentRoute: typeof ProtectedWorkspaceNamespaceRouteImport
    }
    '/_protected/workspace/$namespace/_namespace/transactions': {
      preLoaderRoute: typeof ProtectedWorkspaceNamespaceNamespaceTransactionsLazyImport
      parentRoute: typeof ProtectedWorkspaceNamespaceNamespaceImport
    }
    '/_protected/workspace/$namespace/_namespace/': {
      preLoaderRoute: typeof ProtectedWorkspaceNamespaceNamespaceIndexImport
      parentRoute: typeof ProtectedWorkspaceNamespaceNamespaceImport
    }
    '/_protected/workspace/$namespace/_namespace/accounts/$accountId': {
      preLoaderRoute: typeof ProtectedWorkspaceNamespaceNamespaceAccountsAccountIdLazyImport
      parentRoute: typeof ProtectedWorkspaceNamespaceNamespaceImport
    }
    '/_protected/workspace/$namespace/_namespace/accounts/': {
      preLoaderRoute: typeof ProtectedWorkspaceNamespaceNamespaceAccountsIndexImport
      parentRoute: typeof ProtectedWorkspaceNamespaceNamespaceImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  ProtectedRoute.addChildren([
    ProtectedSetupLazyRoute,
    ProtectedWorkspaceNamespaceRouteRoute.addChildren([
      ProtectedWorkspaceNamespaceNamespaceRoute.addChildren([
        ProtectedWorkspaceNamespaceNamespaceTransactionsLazyRoute,
        ProtectedWorkspaceNamespaceNamespaceIndexRoute,
        ProtectedWorkspaceNamespaceNamespaceAccountsAccountIdLazyRoute,
        ProtectedWorkspaceNamespaceNamespaceAccountsIndexRoute,
      ]),
    ]),
    ProtectedWorkspaceIndexRoute,
  ]),
  PublicRoute.addChildren([
    PublicLoginRoute,
    PublicSignupRoute,
    PublicIndexLazyRoute,
  ]),
])
