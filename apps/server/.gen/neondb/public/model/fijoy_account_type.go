//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type FijoyAccountType string

const (
	FijoyAccountType_Chequing FijoyAccountType = "chequing"
	FijoyAccountType_Savings  FijoyAccountType = "savings"
	FijoyAccountType_Credit   FijoyAccountType = "credit"
	FijoyAccountType_Mortgage FijoyAccountType = "mortgage"
	FijoyAccountType_Gic      FijoyAccountType = "gic"
	FijoyAccountType_Tfsa     FijoyAccountType = "tfsa"
	FijoyAccountType_Rrsp     FijoyAccountType = "rrsp"
	FijoyAccountType_Fhsa     FijoyAccountType = "fhsa"
	FijoyAccountType_Cash     FijoyAccountType = "cash"
)

func (e *FijoyAccountType) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "chequing":
		*e = FijoyAccountType_Chequing
	case "savings":
		*e = FijoyAccountType_Savings
	case "credit":
		*e = FijoyAccountType_Credit
	case "mortgage":
		*e = FijoyAccountType_Mortgage
	case "gic":
		*e = FijoyAccountType_Gic
	case "tfsa":
		*e = FijoyAccountType_Tfsa
	case "rrsp":
		*e = FijoyAccountType_Rrsp
	case "fhsa":
		*e = FijoyAccountType_Fhsa
	case "cash":
		*e = FijoyAccountType_Cash
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for FijoyAccountType enum")
	}

	return nil
}

func (e FijoyAccountType) String() string {
	return string(e)
}
