//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FijoyUserKey = newFijoyUserKeyTable("public", "fijoy_user_key", "")

type fijoyUserKeyTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	UserID         postgres.ColumnString
	HashedPassword postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FijoyUserKeyTable struct {
	fijoyUserKeyTable

	EXCLUDED fijoyUserKeyTable
}

// AS creates new FijoyUserKeyTable with assigned alias
func (a FijoyUserKeyTable) AS(alias string) *FijoyUserKeyTable {
	return newFijoyUserKeyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FijoyUserKeyTable with assigned schema name
func (a FijoyUserKeyTable) FromSchema(schemaName string) *FijoyUserKeyTable {
	return newFijoyUserKeyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FijoyUserKeyTable with assigned table prefix
func (a FijoyUserKeyTable) WithPrefix(prefix string) *FijoyUserKeyTable {
	return newFijoyUserKeyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FijoyUserKeyTable with assigned table suffix
func (a FijoyUserKeyTable) WithSuffix(suffix string) *FijoyUserKeyTable {
	return newFijoyUserKeyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFijoyUserKeyTable(schemaName, tableName, alias string) *FijoyUserKeyTable {
	return &FijoyUserKeyTable{
		fijoyUserKeyTable: newFijoyUserKeyTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newFijoyUserKeyTableImpl("", "excluded", ""),
	}
}

func newFijoyUserKeyTableImpl(schemaName, tableName, alias string) fijoyUserKeyTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		UserIDColumn         = postgres.StringColumn("user_id")
		HashedPasswordColumn = postgres.StringColumn("hashed_password")
		allColumns           = postgres.ColumnList{IDColumn, UserIDColumn, HashedPasswordColumn}
		mutableColumns       = postgres.ColumnList{UserIDColumn, HashedPasswordColumn}
	)

	return fijoyUserKeyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		UserID:         UserIDColumn,
		HashedPassword: HashedPasswordColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
