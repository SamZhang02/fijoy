//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FijoyWorkspaceCurrency = newFijoyWorkspaceCurrencyTable("public", "fijoy_workspace_currency", "")

type fijoyWorkspaceCurrencyTable struct {
	postgres.Table

	// Columns
	WorkspaceID postgres.ColumnString
	CurrencyID  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FijoyWorkspaceCurrencyTable struct {
	fijoyWorkspaceCurrencyTable

	EXCLUDED fijoyWorkspaceCurrencyTable
}

// AS creates new FijoyWorkspaceCurrencyTable with assigned alias
func (a FijoyWorkspaceCurrencyTable) AS(alias string) *FijoyWorkspaceCurrencyTable {
	return newFijoyWorkspaceCurrencyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FijoyWorkspaceCurrencyTable with assigned schema name
func (a FijoyWorkspaceCurrencyTable) FromSchema(schemaName string) *FijoyWorkspaceCurrencyTable {
	return newFijoyWorkspaceCurrencyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FijoyWorkspaceCurrencyTable with assigned table prefix
func (a FijoyWorkspaceCurrencyTable) WithPrefix(prefix string) *FijoyWorkspaceCurrencyTable {
	return newFijoyWorkspaceCurrencyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FijoyWorkspaceCurrencyTable with assigned table suffix
func (a FijoyWorkspaceCurrencyTable) WithSuffix(suffix string) *FijoyWorkspaceCurrencyTable {
	return newFijoyWorkspaceCurrencyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFijoyWorkspaceCurrencyTable(schemaName, tableName, alias string) *FijoyWorkspaceCurrencyTable {
	return &FijoyWorkspaceCurrencyTable{
		fijoyWorkspaceCurrencyTable: newFijoyWorkspaceCurrencyTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newFijoyWorkspaceCurrencyTableImpl("", "excluded", ""),
	}
}

func newFijoyWorkspaceCurrencyTableImpl(schemaName, tableName, alias string) fijoyWorkspaceCurrencyTable {
	var (
		WorkspaceIDColumn = postgres.StringColumn("workspace_id")
		CurrencyIDColumn  = postgres.StringColumn("currency_id")
		allColumns        = postgres.ColumnList{WorkspaceIDColumn, CurrencyIDColumn}
		mutableColumns    = postgres.ColumnList{}
	)

	return fijoyWorkspaceCurrencyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkspaceID: WorkspaceIDColumn,
		CurrencyID:  CurrencyIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
