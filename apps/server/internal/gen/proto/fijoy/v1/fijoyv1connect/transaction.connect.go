// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fijoy/v1/transaction.proto

package fijoyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fijoy/internal/gen/proto/fijoy/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TransactionServiceName is the fully-qualified name of the TransactionService service.
	TransactionServiceName = "fijoy.v1.TransactionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransactionServiceCreateIncomeTransactionProcedure is the fully-qualified name of the
	// TransactionService's CreateIncomeTransaction RPC.
	TransactionServiceCreateIncomeTransactionProcedure = "/fijoy.v1.TransactionService/CreateIncomeTransaction"
	// TransactionServiceCreateAdjustmentTransactionProcedure is the fully-qualified name of the
	// TransactionService's CreateAdjustmentTransaction RPC.
	TransactionServiceCreateAdjustmentTransactionProcedure = "/fijoy.v1.TransactionService/CreateAdjustmentTransaction"
	// TransactionServiceGetTransactionsProcedure is the fully-qualified name of the
	// TransactionService's GetTransactions RPC.
	TransactionServiceGetTransactionsProcedure = "/fijoy.v1.TransactionService/GetTransactions"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	transactionServiceServiceDescriptor                           = v1.File_fijoy_v1_transaction_proto.Services().ByName("TransactionService")
	transactionServiceCreateIncomeTransactionMethodDescriptor     = transactionServiceServiceDescriptor.Methods().ByName("CreateIncomeTransaction")
	transactionServiceCreateAdjustmentTransactionMethodDescriptor = transactionServiceServiceDescriptor.Methods().ByName("CreateAdjustmentTransaction")
	transactionServiceGetTransactionsMethodDescriptor             = transactionServiceServiceDescriptor.Methods().ByName("GetTransactions")
)

// TransactionServiceClient is a client for the fijoy.v1.TransactionService service.
type TransactionServiceClient interface {
	CreateIncomeTransaction(context.Context, *connect.Request[v1.CreateIncomeTransactionRequest]) (*connect.Response[v1.Transaction], error)
	// rpc CreateExpenseTransaction(CreateExpenseTransactionRequest) returns (Transaction);
	// rpc CreateTransferTransaction(CreateTransferTransactionRequest) returns (Transaction);
	CreateAdjustmentTransaction(context.Context, *connect.Request[v1.CreateAdjustmentTransactionRequest]) (*connect.Response[v1.Transaction], error)
	GetTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Transactions], error)
}

// NewTransactionServiceClient constructs a client for the fijoy.v1.TransactionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transactionServiceClient{
		createIncomeTransaction: connect.NewClient[v1.CreateIncomeTransactionRequest, v1.Transaction](
			httpClient,
			baseURL+TransactionServiceCreateIncomeTransactionProcedure,
			connect.WithSchema(transactionServiceCreateIncomeTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAdjustmentTransaction: connect.NewClient[v1.CreateAdjustmentTransactionRequest, v1.Transaction](
			httpClient,
			baseURL+TransactionServiceCreateAdjustmentTransactionProcedure,
			connect.WithSchema(transactionServiceCreateAdjustmentTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTransactions: connect.NewClient[emptypb.Empty, v1.Transactions](
			httpClient,
			baseURL+TransactionServiceGetTransactionsProcedure,
			connect.WithSchema(transactionServiceGetTransactionsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// transactionServiceClient implements TransactionServiceClient.
type transactionServiceClient struct {
	createIncomeTransaction     *connect.Client[v1.CreateIncomeTransactionRequest, v1.Transaction]
	createAdjustmentTransaction *connect.Client[v1.CreateAdjustmentTransactionRequest, v1.Transaction]
	getTransactions             *connect.Client[emptypb.Empty, v1.Transactions]
}

// CreateIncomeTransaction calls fijoy.v1.TransactionService.CreateIncomeTransaction.
func (c *transactionServiceClient) CreateIncomeTransaction(ctx context.Context, req *connect.Request[v1.CreateIncomeTransactionRequest]) (*connect.Response[v1.Transaction], error) {
	return c.createIncomeTransaction.CallUnary(ctx, req)
}

// CreateAdjustmentTransaction calls fijoy.v1.TransactionService.CreateAdjustmentTransaction.
func (c *transactionServiceClient) CreateAdjustmentTransaction(ctx context.Context, req *connect.Request[v1.CreateAdjustmentTransactionRequest]) (*connect.Response[v1.Transaction], error) {
	return c.createAdjustmentTransaction.CallUnary(ctx, req)
}

// GetTransactions calls fijoy.v1.TransactionService.GetTransactions.
func (c *transactionServiceClient) GetTransactions(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.Transactions], error) {
	return c.getTransactions.CallUnary(ctx, req)
}

// TransactionServiceHandler is an implementation of the fijoy.v1.TransactionService service.
type TransactionServiceHandler interface {
	CreateIncomeTransaction(context.Context, *connect.Request[v1.CreateIncomeTransactionRequest]) (*connect.Response[v1.Transaction], error)
	// rpc CreateExpenseTransaction(CreateExpenseTransactionRequest) returns (Transaction);
	// rpc CreateTransferTransaction(CreateTransferTransactionRequest) returns (Transaction);
	CreateAdjustmentTransaction(context.Context, *connect.Request[v1.CreateAdjustmentTransactionRequest]) (*connect.Response[v1.Transaction], error)
	GetTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Transactions], error)
}

// NewTransactionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionServiceHandler(svc TransactionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transactionServiceCreateIncomeTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceCreateIncomeTransactionProcedure,
		svc.CreateIncomeTransaction,
		connect.WithSchema(transactionServiceCreateIncomeTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceCreateAdjustmentTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceCreateAdjustmentTransactionProcedure,
		svc.CreateAdjustmentTransaction,
		connect.WithSchema(transactionServiceCreateAdjustmentTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceGetTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceGetTransactionsProcedure,
		svc.GetTransactions,
		connect.WithSchema(transactionServiceGetTransactionsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/fijoy.v1.TransactionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionServiceCreateIncomeTransactionProcedure:
			transactionServiceCreateIncomeTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceCreateAdjustmentTransactionProcedure:
			transactionServiceCreateAdjustmentTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceGetTransactionsProcedure:
			transactionServiceGetTransactionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionServiceHandler struct{}

func (UnimplementedTransactionServiceHandler) CreateIncomeTransaction(context.Context, *connect.Request[v1.CreateIncomeTransactionRequest]) (*connect.Response[v1.Transaction], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.TransactionService.CreateIncomeTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) CreateAdjustmentTransaction(context.Context, *connect.Request[v1.CreateAdjustmentTransactionRequest]) (*connect.Response[v1.Transaction], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.TransactionService.CreateAdjustmentTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) GetTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Transactions], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.TransactionService.GetTransactions is not implemented"))
}
