// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file fijoy/v1/account.proto (package fijoy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum fijoy.v1.AccountType
 */
export enum AccountType {
  /**
   * @generated from enum value: CASH = 0;
   */
  CASH = 0,

  /**
   * @generated from enum value: DEBT = 1;
   */
  DEBT = 1,

  /**
   * @generated from enum value: INVESTMENT = 2;
   */
  INVESTMENT = 2,

  /**
   * @generated from enum value: OTHER_ASSET = 3;
   */
  OTHER_ASSET = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AccountType)
proto3.util.setEnumType(AccountType, "fijoy.v1.AccountType", [
  { no: 0, name: "CASH" },
  { no: 1, name: "DEBT" },
  { no: 2, name: "INVESTMENT" },
  { no: 3, name: "OTHER_ASSET" },
]);

/**
 * @generated from message fijoy.v1.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: fijoy.v1.AccountType account_type = 4;
   */
  accountType = AccountType.CASH;

  /**
   * @generated from field: int64 balance = 5;
   */
  balance = protoInt64.zero;

  /**
   * @generated from field: string currency = 6;
   */
  currency = "";

  /**
   * @generated from field: string institution = 7;
   */
  institution = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 9;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 5, name: "balance", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "institution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
    { no: 9, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * @generated from message fijoy.v1.Accounts
 */
export class Accounts extends Message<Accounts> {
  /**
   * @generated from field: repeated fijoy.v1.Account accounts = 1;
   */
  accounts: Account[] = [];

  constructor(data?: PartialMessage<Accounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.Accounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Accounts {
    return new Accounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Accounts {
    return new Accounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Accounts {
    return new Accounts().fromJsonString(jsonString, options);
  }

  static equals(a: Accounts | PlainMessage<Accounts> | undefined, b: Accounts | PlainMessage<Accounts> | undefined): boolean {
    return proto3.util.equals(Accounts, a, b);
  }
}

/**
 * @generated from message fijoy.v1.CreateAccountRequest
 */
export class CreateAccountRequest extends Message<CreateAccountRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string account_type = 2;
   */
  accountType = "";

  /**
   * @generated from field: int64 balance = 3;
   */
  balance = protoInt64.zero;

  /**
   * @generated from field: string currency = 4;
   */
  currency = "";

  /**
   * @generated from field: string institution = 5;
   */
  institution = "";

  constructor(data?: PartialMessage<CreateAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.CreateAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "balance", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "institution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined, b: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined): boolean {
    return proto3.util.equals(CreateAccountRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.GetAccountByIdRequest
 */
export class GetAccountByIdRequest extends Message<GetAccountByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetAccountByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.GetAccountByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountByIdRequest {
    return new GetAccountByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountByIdRequest {
    return new GetAccountByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountByIdRequest {
    return new GetAccountByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountByIdRequest | PlainMessage<GetAccountByIdRequest> | undefined, b: GetAccountByIdRequest | PlainMessage<GetAccountByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountByIdRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.DeleteAccountByIdRequest
 */
export class DeleteAccountByIdRequest extends Message<DeleteAccountByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteAccountByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.DeleteAccountByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountByIdRequest {
    return new DeleteAccountByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountByIdRequest {
    return new DeleteAccountByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountByIdRequest {
    return new DeleteAccountByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountByIdRequest | PlainMessage<DeleteAccountByIdRequest> | undefined, b: DeleteAccountByIdRequest | PlainMessage<DeleteAccountByIdRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccountByIdRequest, a, b);
  }
}

