package handler

import (
	"context"
	"fijoy/internal/gen/proto/fijoy/v1/fijoyv1connect"
	"fmt"
	"log"

	hellov1 "fijoy/internal/gen/proto/fijoy/v1" // generated by protoc-gen-go

	"connectrpc.com/connect"
	"github.com/go-chi/chi/v5"
	// generated by protoc-gen-connect-go
)

type HelloServer struct{}

func (s *HelloServer) Hello(
	ctx context.Context,
	req *connect.Request[hellov1.HelloRequest],
) (*connect.Response[hellov1.HelloResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&hellov1.HelloResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func NewHelloHandler(r *chi.Mux) {
	helloServer := &HelloServer{}

	path, handler := fijoyv1connect.NewGreetServiceHandler(helloServer)

	r.Group(func(r chi.Router) {
		// r.Use(jwtauth.Verifier(tokenAuth))
		// r.Use(jwtauth.Authenticator(tokenAuth))

		r.Mount(path, handler)
	})
}
